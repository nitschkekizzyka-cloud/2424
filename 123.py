#!/usr/bin/env python3
# crypto_final_bot.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–û–¢–ê
import requests
import time
import sqlite3
import json
import pandas as pd
from datetime import datetime
from threading import Thread, Lock
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

CONFIG = {
    'database_path': 'crypto_final.db',
    'interval': 5 * 60,
    'top_n': 100,
    'min_confidence': 60
}

EXCLUDE_COINS = [
    'usdt', 'usdc', 'busd', 'dai', 'tusd', 'ust', 'fdusd', 'pyusd', 'cusdc', 'cdai',
    'btc', 'eth', 'bnb', 'xrp', 'ada', 'doge', 'sol', 'dot', 'matic', 'ltc',
    'bch', 'link', 'xlm', 'atom', 'etc', 'xmr', 'xtz', 'eos', 'trx', 'neo'
]

class AdvancedAnalyzer:
    def __init__(self):
        self.session = requests.Session()
    
    def fetch_all_coins(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": CONFIG['top_n'],
            "page": 1,
            "sparkline": "false",
            "price_change_percentage": "24h,7d"
        }
        
        try:
            response = self.session.get(url, params=params, timeout=30)
            if response.status_code == 200:
                coins = response.json()
                filtered_coins = [
                    coin for coin in coins 
                    if coin['symbol'].lower() not in EXCLUDE_COINS
                ]
                return filtered_coins
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç: {e}")
        return []
    
    def calculate_coin_score(self, coin):
        """–†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—á–µ—Ç –º–æ–Ω–µ—Ç—ã (0-100)"""
        score = 0
        analysis = {}
        
        # 1. Volume Score (30%)
        volume_ratio = coin['total_volume'] / coin['market_cap'] if coin['market_cap'] > 0 else 0
        if volume_ratio > 0.3:
            score += 30
            analysis['volume'] = "üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º"
        elif volume_ratio > 0.15:
            score += 20
            analysis['volume'] = "üìà –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º"
        elif volume_ratio > 0.05:
            score += 10
            analysis['volume'] = "üíπ –•–æ—Ä–æ—à–∏–π –æ–±—ä–µ–º"
        
        # 2. Price Momentum Score (25%)
        price_change_24h = coin.get('price_change_percentage_24h', 0)
        if 10 < price_change_24h < 50:
            score += 25
            analysis['momentum'] = f"üöÄ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{price_change_24h:.1f}%"
        elif 5 < price_change_24h < 10:
            score += 15
            analysis['momentum'] = f"üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç +{price_change_24h:.1f}%"
        elif price_change_24h < -20:
            score += 10
            analysis['momentum'] = f"üí• –ü—Ä–æ—Å–∞–¥–∫–∞ {price_change_24h:.1f}%"
        
        # 3. Market Cap Score (20%)
        market_cap = coin['market_cap']
        if market_cap < 50000000:  # < $50M
            score += 20
            analysis['market_cap'] = "üè¶ –ú–∞–ª–∞—è –∫–∞–ø–∞ - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif market_cap < 200000000:  # < $200M
            score += 15
            analysis['market_cap'] = "üè¶ –°—Ä–µ–¥–Ω—è—è –∫–∞–ø–∞"
        
        # 4. Trend Score (15%)
        price_change_7d = coin.get('price_change_percentage_7d_in_currency', 0)
        if price_change_7d > 20:
            score += 15
            analysis['trend'] = f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{price_change_7d:.1f}%"
        elif price_change_7d > 0:
            score += 8
            analysis['trend'] = f"üìä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥"
        
        # 5. Risk Adjustment
        if price_change_24h > 100:
            score -= 15
            analysis['risk'] = "‚ö†Ô∏è –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        elif price_change_24h > 200:
            score -= 25
            analysis['risk'] = "üö® –°–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞"
        
        return max(0, min(100, score)), analysis
    
    def get_top_predictions(self, coins_data, top_n=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –º–æ–Ω–µ—Ç –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª–µ"""
        predictions = []
        
        for coin in coins_data:
            score, analysis = self.calculate_coin_score(coin)
            predictions.append({
                'symbol': coin['symbol'].upper(),
                'name': coin['name'],
                'score': score,
                'price': coin['current_price'],
                'price_change_24h': coin.get('price_change_percentage_24h', 0),
                'market_cap': coin['market_cap'],
                'volume': coin['total_volume'],
                'analysis': analysis
            })
        
        predictions.sort(key=lambda x: x['score'], reverse=True)
        return predictions[:top_n]
    
    def get_coin_analysis(self, symbol, coins_data):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        for coin in coins_data:
            if coin['symbol'].upper() == symbol.upper():
                score, analysis = self.calculate_coin_score(coin)
                return {
                    'symbol': symbol.upper(),
                    'name': coin['name'],
                    'score': score,
                    'price': coin['current_price'],
                    'price_change_24h': coin.get('price_change_percentage_24h', 0),
                    'market_cap': coin['market_cap'],
                    'volume': coin['total_volume'],
                    'volume_ratio': coin['total_volume'] / coin['market_cap'] if coin['market_cap'] > 0 else 0,
                    'analysis': analysis,
                    'recommendation': self.get_recommendation(score, analysis)
                }
        return None
    
    def get_recommendation(self, score, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞"""
        if score >= 80:
            return "üöÄ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ - –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞"
        elif score >= 65:
            return "üìà –•–û–†–û–®–ò–ô –°–ò–ì–ù–ê–õ - –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif score >= 50:
            return "üí° –°–†–ï–î–ù–ò–ô –°–ò–ì–ù–ê–õ - –¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"
        else:
            return "‚ö†Ô∏è –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"

class CryptoFinalBot:
    def __init__(self):
        self.token = "8406686288:AAHSHNwi_ocevorBddn5P_6Oc70aMx0-Usc"
        self.chat_id = "6823451625"
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.analyzer = AdvancedAnalyzer()
        self.last_update_id = 0
        self.user_states = {}
    
    def send_message(self, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        url = f"{self.base_url}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup
            
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False
    
    def create_reply_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
        return {
            'keyboard': [
                ['üèÜ –¢–û–ü 10', 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê'],
                ['üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´', 'üöÄ –°–ò–ì–ù–ê–õ–´'],
                ['‚ùì –ü–û–ú–û–©–¨']
            ],
            'resize_keyboard': True,
            'one_time_keyboard': False
        }
    
    def create_signal_keyboard(self, symbol):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –°–†–ê–ë–û–¢–ê–õ', 'callback_data': f'success_{symbol}'},
                    {'text': '‚ùå –ù–ï –°–†–ê–ë–û–¢–ê–õ', 'callback_data': f'fail_{symbol}'}
                ],
                [
                    {'text': 'üí° –ß–ê–°–¢–ò–ß–ù–û', 'callback_data': f'partial_{symbol}'}
                ]
            ]
        }
    
    def format_top_predictions(self, predictions):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        message = "üèÜ <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>\n\n"
        
        for i, coin in enumerate(predictions, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            message += f"{emoji} <b>{coin['symbol']}</b> - Score: {coin['score']}%\n"
            message += f"   üí∞ ${coin['price']:.6f} | üìà {coin['price_change_24h']:.1f}%\n"
            
            main_reason = list(coin['analysis'].values())[0] if coin['analysis'] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            message += f"   üîç {main_reason}\n\n"
        
        message += "‚ö° <i>–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</i>"
        return message
    
    def format_coin_analysis(self, analysis):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
        if not analysis:
            return "‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL)"
        
        message = f"""
üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - {analysis['symbol']}</b>

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {analysis['name']}
üéØ <b>–û–±—â–∏–π —Å—á–µ—Ç:</b> {analysis['score']}/100
üí∞ <b>–¶–µ–Ω–∞:</b> ${analysis['price']:.6f}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {analysis['price_change_24h']:.1f}%
üè¶ <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${analysis['market_cap']:,.0f}
üìà <b>–û–±—ä–µ–º/–ö–∞–ø–∞:</b> {analysis['volume_ratio']:.2%}

<b>–ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö:</b>
"""
        for metric, desc in analysis['analysis'].items():
            message += f"‚Ä¢ {desc}\n"
        
        message += f"\n<b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b>\n{analysis['recommendation']}"
        return message
    
    def format_statistics(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        message = """
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

<b>üìà –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢:</b>
‚Ä¢ 100+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –†–∏—Å–∫/–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞

<b>üéØ –ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:</b>
‚Ä¢ –ú–∞–ª–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (<$50M)
‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç (5-50%)
‚Ä¢ –ù–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã

<b>üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>
‚Ä¢ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ –¢–æ–ø 10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö

‚ö° <i>–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è!</i>
"""
        return message
    
    def format_help(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–º–æ—â—å"""
        help_text = """
‚ùì <b>–ü–û–ú–û–©–¨ –ü–û –°–ò–°–¢–ï–ú–ï</b>

<b>üèÜ –¢–û–ü 10</b> - –õ—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É —Ä–æ—Å—Ç–∞
<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
<b>üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´</b> - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª—É
<b>üöÄ –°–ò–ì–ù–ê–õ–´</b> - –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã

<b>üìà –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
2. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
3. –û—Ç–º–µ—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
4. –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö

<b>üí° –ü–†–ò–ú–ï–†–´ –°–ò–ú–í–û–õ–û–í:</b>
BTC, ETH, SOL, ADA, DOT, MATIC, AVAX, NEAR

‚ö° <i>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫!</i>
"""
        return help_text
    
    def show_top_predictions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 10 –º–æ–Ω–µ—Ç"""
        coins_data = self.analyzer.fetch_all_coins()
        predictions = self.analyzer.get_top_predictions(coins_data, 10)
        message = self.format_top_predictions(predictions)
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        message = self.format_statistics()
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        message = self.format_help()
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def ask_for_coin_symbol(self):
        """–ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã"""
        message = """
üîç <b>–ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´</b>

–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ <b>–ü—Ä–∏–º–µ—Ä—ã:</b> BTC, ETH, SOL, ADA, DOT
‚Ä¢ <b>–ò–ª–∏:</b> MATIC, AVAX, NEAR, ATOM

üìä <i>–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:
- Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
- Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏
- –û–±—â–∏–π scoring (0-100)</i>

üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Å–µ–π—á–∞—Å:</b>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def analyze_coin_by_symbol(self, symbol):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—É –ø–æ —Å–∏–º–≤–æ–ª—É"""
        coins_data = self.analyzer.fetch_all_coins()
        analysis = self.analyzer.get_coin_analysis(symbol, coins_data)
        message = self.format_coin_analysis(analysis)
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_active_signals(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        message = """
üöÄ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´</b>

–°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç!

<b>üìà –°–ò–ì–ù–ê–õ–´ –í–ö–õ–Æ–ß–ê–Æ–¢:</b>
‚Ä¢ –ú–æ–Ω–µ—Ç—ã —Å scoring > 60%
‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –∫–∞–ø–µ
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

<b>‚è∞ –ß–ê–°–¢–û–¢–ê –°–ò–ì–ù–ê–õ–û–í:</b>
‚Ä¢ –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ setup
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞ –∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π

‚ö° <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...</i>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def send_signal(self, coin, score, analysis):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        symbol = coin['symbol'].upper()
        
        message = f"""
üéØ <b>–°–ò–ì–ù–ê–õ - {symbol}</b>

‚≠ê <b>Score:</b> {score}/100
üí∞ <b>–¶–µ–Ω–∞:</b> ${coin['current_price']:.6f}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {coin.get('price_change_percentage_24h', 0):.1f}%

<b>–û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´:</b>
{chr(10).join(['‚Ä¢ ' + reason for reason in analysis.values()][:3])}

üí° <i>–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã!</i>
"""
        
        keyboard = self.create_signal_keyboard(symbol)
        return self.send_message(message, keyboard)
    
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {'offset': self.last_update_id + 1, 'timeout': 10}
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                updates = response.json().get('result', [])
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        self.handle_message(update['message'])
                    elif 'callback_query' in update:
                        self.handle_callback(update['callback_query'])
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if 'text' not in message:
            return
        
        text = message['text']
        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        if text == 'üèÜ –¢–û–ü 10':
            self.show_top_predictions()
        elif text == 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê':
            self.show_statistics()
        elif text == 'üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´':
            self.ask_for_coin_symbol()
        elif text == 'üöÄ –°–ò–ì–ù–ê–õ–´':
            self.show_active_signals()
        elif text == '‚ùì –ü–û–ú–û–©–¨':
            self.show_help()
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
            if len(text) <= 10 and text.isalnum():
                self.analyze_coin_by_symbol(text)
            else:
                self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", self.create_reply_keyboard())
    
    def handle_callback(self, callback_query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)"""
        try:
            callback_data = callback_query['data']
            message = callback_query['message']
            
            print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
            
            if callback_data.startswith('success_'):
                symbol = callback_data.replace('success_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –°–†–ê–ë–û–¢–ê–õ\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
            elif callback_data.startswith('fail_'):
                symbol = callback_data.replace('fail_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –ù–ï –°–†–ê–ë–û–¢–ê–õ\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
            elif callback_data.startswith('partial_'):
                symbol = callback_data.replace('partial_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –ß–ê–°–¢–ò–ß–ù–û\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def send_welcome(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = """
ü§ñ <b>–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û</b>

üöÄ <b>–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´...</b>

üìä <b>–ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢:</b>
‚Ä¢ 100+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –†–∏—Å–∫/–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>
‚Ä¢ üèÜ –¢–æ–ø 10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
‚Ä¢ üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ üöÄ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã

‚ö° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!</b>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(welcome_text, keyboard)

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")
    
    bot = CryptoFinalBot()
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    def updates_worker():
        while True:
            bot.check_updates()
            time.sleep(2)
    
    updates_thread = Thread(target=updates_worker, daemon=True)
    updates_thread.start()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_welcome()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
    while True:
        try:
            print(f"\n[{datetime.now().strftime('%H:%M:%S')}] –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã
            coins_data = bot.analyzer.fetch_all_coins()
            if coins_data:
                print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(coins_data)} –º–æ–Ω–µ—Ç")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                top_predictions = bot.analyzer.get_top_predictions(coins_data, 10)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç–æ–ø –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º score
                signals_sent = 0
                for coin_data in top_predictions[:3]:  # –¢–æ–ø 3
                    if coin_data['score'] >= CONFIG['min_confidence']:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                        for coin in coins_data:
                            if coin['symbol'].upper() == coin_data['symbol']:
                                if bot.send_signal(coin, coin_data['score'], coin_data['analysis']):
                                    signals_sent += 1
                                    time.sleep(3)
                                break
                
                if signals_sent == 0:
                    print("üìä –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_sent}")
            
            print(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {CONFIG['interval']} —Å–µ–∫—É–Ω–¥...")
            time.sleep(CONFIG['interval'])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(60)

if __name__ == "__main__":
    main()