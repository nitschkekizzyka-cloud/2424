# crypto_advanced_bot.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

class CryptoAdvancedBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç —Å –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ–º"""
    
    def __init__(self, token: str, chat_id: str):
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
        self.db = DatabaseManager()
        self.is_processing = False
        self.cached_predictions = None
        self.last_successful_update = None
        self.last_stats_update = datetime.now() - timedelta(hours=24)
    
    async def show_top_predictions(self, force_update: bool = False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üèÜ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç...")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
        if self.cached_predictions and not force_update:
            message = await self.format_top_predictions(
                self.cached_predictions[:10], 
                show_cache_info=True,
                update_time=self.last_successful_update
            )
            await self.send_message(message)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        async with AdvancedAnalyzer(self.db) as analyzer:
            try:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                top_coins_task = asyncio.create_task(analyzer.fetch_top_coins(50))
                potential_coins_task = asyncio.create_task(analyzer.fetch_potential_coins(150))
                
                top_coins, potential_coins = await asyncio.gather(
                    top_coins_task, potential_coins_task
                )
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                all_coins = top_coins + potential_coins
                unique_coins = {}
                for coin in all_coins:
                    symbol = coin['symbol'].upper()
                    if symbol not in unique_coins:
                        unique_coins[symbol] = coin
                
                coins_to_analyze = list(unique_coins.values())
                logger.info(f"üìä –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(coins_to_analyze)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
                analyses = []
                semaphore = asyncio.Semaphore(10)
                
                async def analyze_with_semaphore(coin):
                    async with semaphore:
                        return await analyzer.analyze_coin(coin)
                
                analysis_tasks = [analyze_with_semaphore(coin) for coin in coins_to_analyze]
                results = await asyncio.gather(*analysis_tasks, return_exceptions=True)
                
                # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
                for result in results:
                    if isinstance(result, dict) and result.get('score', 0) >= 40:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–æ–ø–∞
                        analyses.append(result)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
                analyses.sort(key=lambda x: x['score'], reverse=True)
                top_10 = analyses[:10]
                self.cached_predictions = analyses  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∫–µ—à–∞
                self.last_successful_update = datetime.now()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-10
                message = await self.format_top_predictions(top_10, force_update=force_update)
                await self.send_message(message)
                
                logger.info(f"‚úÖ –¢–æ–ø-10 —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –õ—É—á—à–∞—è –º–æ–Ω–µ—Ç–∞: {top_10[0]['symbol']} - {top_10[0]['score']}%")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∞: {e}")
                await self.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def format_top_predictions(self, predictions: List[Dict], 
                                   show_cache_info: bool = False, 
                                   update_time: datetime = None,
                                   force_update: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø-10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        if not predictions:
            return "üìä <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        message = "üèÜ <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>\n\n"
        
        for i, coin in enumerate(predictions, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–Ω–µ—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏
            type_emoji = "üÜï" if coin.get('is_new') else "üìà" if coin.get('discovery_source') == DiscoverySource.VOLUME_SCREENER.value else "üèÜ"
            
            message += f"{emoji} {type_emoji} <b>{coin['symbol']}</b> - Score: {coin['score']}%\n"
            message += f"   üí∞ {self.format_price(coin['price'])} | üìà {coin['price_change_24h']:.1f}% | üöÄ {coin['price_change_7d']:.1f}%\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä —É—Å–ø–µ—Ö–∞
            if coin['analysis']:
                main_reason = list(coin['analysis'].values())[0]
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                if len(main_reason) > 50:
                    main_reason = main_reason[:47] + "..."
                message += f"   üîç {main_reason}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if coin.get('bonus_applied', 0) > 0:
                message += f"   üíé –ë–æ–Ω—É—Å: +{coin['bonus_applied']}%\n"
            
            message += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if force_update:
            message += "‚ö° <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ</b>\n"
        elif show_cache_info and update_time:
            time_diff = datetime.now() - update_time
            minutes_ago = int(time_diff.total_seconds() / 60)
            message += f"üíæ <i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {update_time.strftime('%H:%M:%S')} ({minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥)</i>\n"
        
        message += "üîÑ <i>–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</i>"
        
        return message
    
    async def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ø–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ–ø–∞...")
        
        async with AdvancedAnalyzer(self.db) as analyzer:
            try:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-–º–æ–Ω–µ—Ç—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
                top_coins_task = asyncio.create_task(analyzer.fetch_top_coins(50))
                potential_coins_task = asyncio.create_task(analyzer.fetch_potential_coins(150))
                
                top_coins, potential_coins = await asyncio.gather(
                    top_coins_task, potential_coins_task
                )
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                all_coins = top_coins + potential_coins
                unique_coins = {}
                for coin in all_coins:
                    symbol = coin['symbol'].upper()
                    if symbol not in unique_coins:
                        unique_coins[symbol] = coin
                
                coins_to_analyze = list(unique_coins.values())
                logger.info(f"üìä –í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(coins_to_analyze)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
                analyses = []
                semaphore = asyncio.Semaphore(10)
                
                async def analyze_with_semaphore(coin):
                    async with semaphore:
                        return await analyzer.analyze_coin(coin)
                
                analysis_tasks = [analyze_with_semaphore(coin) for coin in coins_to_analyze]
                results = await asyncio.gather(*analysis_tasks, return_exceptions=True)
                
                # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
                for result in results:
                    if isinstance(result, dict) and result.get('score', 0) >= 40:
                        analyses.append(result)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                analyses.sort(key=lambda x: x['score'], reverse=True)
                self.cached_predictions = analyses
                self.last_successful_update = datetime.now()
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ü–∏–∫–ª–µ
                top_5 = analyses[:5]
                for analysis in top_5:
                    if analysis['score'] >= 75:  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª–æ–≤
                        if await self.send_signal(analysis):
                            logger.info(f"‚úÖ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {analysis['symbol']} - {analysis['score']}%")
                            await asyncio.sleep(2)
                
                # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
                if (datetime.now() - self.last_stats_update).total_seconds() > 24 * 3600:
                    await analyzer.ml_model.retrain_model()
                    self.last_stats_update = datetime.now()
                
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–æ–ø-1: {analyses[0]['symbol']} - {analyses[0]['score']}%")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def handle_manual_update(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–∞"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä (30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏)
        if hasattr(self, 'last_manual_update'):
            time_since_last = current_time - self.last_manual_update
            if time_since_last < 30:
                seconds_left = 30 - int(time_since_last)
                return f"‚è∞ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫."
        
        self.last_manual_update = current_time
        await self.show_top_predictions(force_update=True)
        return "‚úÖ –¢–æ–ø-10 –æ–±–Ω–æ–≤–ª–µ–Ω!"

    async def send_detailed_analysis(self, symbol: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        async with AdvancedAnalyzer(self.db) as analyzer:
            # –ò—â–µ–º –º–æ–Ω–µ—Ç—É –≤ –∫–µ—à–µ
            if self.cached_predictions:
                for coin in self.cached_predictions:
                    if coin['symbol'].upper() == symbol.upper():
                        message = await self.format_detailed_analysis(coin)
                        await self.send_message(message)
                        return
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ, –¥–µ–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            logger.info(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã: {symbol}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ CoinGecko API
            await self.send_message(f"üîç –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ø.")

    async def format_detailed_analysis(self, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
        symbol = analysis['symbol']
        
        message = f"""
üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - {symbol}</b>

‚≠ê <b>–û–±—â–∏–π —Å—á–µ—Ç:</b> {analysis['score']}/100
{'üíé <b>–ë–æ–Ω—É—Å:</b> +' + str(analysis['bonus_applied']) + '%' if analysis.get('bonus_applied', 0) > 0 else ''}
üí∞ <b>–¶–µ–Ω–∞:</b> {self.format_price(analysis['price'])}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {analysis['price_change_24h']:.1f}%
üöÄ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 7–¥:</b> {analysis['price_change_7d']:.1f}%
üè¶ <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${analysis['market_cap']:,.0f}
üíß <b>–û–±—ä–µ–º/–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> {analysis['volume_ratio']:.2%}
üéØ <b>–¢–∏–ø:</b> {'üÜï –ù–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞' if analysis.get('is_new') else 'üìà –í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞' if analysis.get('discovery_source') == DiscoverySource.VOLUME_SCREENER.value else 'üèÜ –¢–æ–ø –º–æ–Ω–µ—Ç–∞'}

<b>–ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:</b>
"""
        
        for metric, desc in analysis['analysis'].items():
            message += f"‚Ä¢ {desc}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if analysis.get('technical_indicators'):
            indicators = analysis['technical_indicators']
            message += f"\n<b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:</b>\n"
            message += f"‚Ä¢ RSI: {indicators.get('rsi', 0):.1f}\n"
            message += f"‚Ä¢ MACD: {indicators.get('macd', 0):.4f}\n"
            message += f"‚Ä¢ SMA 20: {self.format_price(indicators.get('sma_20', 0))}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ score
        if analysis['score'] >= 80:
            recommendation = "üöÄ <b>–°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ</b> - –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞"
        elif analysis['score'] >= 65:
            recommendation = "üìà <b>–•–û–†–û–®–ò–ô –°–ò–ì–ù–ê–õ</b> - –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif analysis['score'] >= 50:
            recommendation = "üí° <b>–°–†–ï–î–ù–ò–ô –°–ò–ì–ù–ê–õ</b> - –¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"
        else:
            recommendation = "‚ö†Ô∏è <b>–°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ</b> - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        
        message += f"\n<b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b>\n{recommendation}"
        
        return message

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
async def handle_message(self, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if text == 'üèÜ –¢–û–ü 10':
        await self.show_top_predictions()
    elif text == 'üîÑ –û–ë–ù–û–í–ò–¢–¨':
        result = await self.handle_manual_update()
        if isinstance(result, str):
            await self.send_message(result)
    elif text == 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê':
        await self.show_statistics()
    elif text == 'üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´':
        await self.ask_for_coin_symbol()
    elif text.startswith('/analyze '):
        symbol = text.replace('/analyze ', '').strip().upper()
        await self.send_detailed_analysis(symbol)
    else:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
        if 2 <= len(text) <= 10 and text.replace(' ', '').isalnum():
            await self.send_detailed_analysis(text)
        else:
            await self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """
ü§ñ <b>–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û</b>

üöÄ <b>–û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>

üèÜ <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ 200+ –º–æ–Ω–µ—Ç
- –†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
- –í–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—ã–µ –∏ –≤–æ—Å—Ö–æ–¥—è—â–∏–µ –º–æ–Ω–µ—Ç—ã

üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó</b>
- –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üìä <b>–ê–í–¢–û-–°–ò–ì–ù–ê–õ–´</b>
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
- –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–∫–∞—Ö
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

‚ö° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!</b>
"""
