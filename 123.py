# crypto_final_bot.py - –¢–û–ü-100 + –ù–û–í–û–°–¢–ò + –ê–í–¢–û-–ê–õ–ï–†–¢–´
import requests
import time
import json
import re
import pandas as pd
from datetime import datetime
from threading import Thread, Lock
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

CONFIG = {
    'database_path': 'crypto_final.db',
    'interval': 5 * 60,
    'min_confidence': 60,
    'news_check_interval': 10 * 60
}

EXCLUDE_COINS = ['usdt', 'usdc', 'busd', 'dai', 'tusd', 'ust', 'fdusd', 'pyusd']

class NewsMonitor:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.last_news = {}
    
    def get_crypto_news(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            url = "https://api.coingecko.com/api/v3/news"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                news_data = response.json()
                return self.process_news(news_data.get('data', []))
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        
        return []
    
    def process_news(self, news_items):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–Ω–µ—Ç—ã"""
        processed_news = []
        
        for news in news_items[:10]:
            title = news.get('title', '')
            description = news.get('description', '')
            url = news.get('url', '')
            
            mentioned_coins = self.extract_coins_from_text(title + " " + description)
            
            if mentioned_coins:
                news_item = {
                    'title': title,
                    'description': description[:200] + "..." if len(description) > 200 else description,
                    'url': url,
                    'coins': mentioned_coins,
                    'timestamp': datetime.now()
                }
                processed_news.append(news_item)
        
        return processed_news
    
    def extract_coins_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–Ω–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_upper = text.upper()
        found_coins = []
        
        popular_coins = [
            'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'DOGE', 'SOL', 'DOT', 'MATIC', 
            'AVAX', 'LINK', 'ATOM', 'XLM', 'ALGO', 'NEAR', 'FTM', 'SAND', 
            'MANA', 'GALA', 'APE', 'GMT', 'APT', 'ARB', 'OP', 'SUI', 'RUNE',
            'PEPE', 'SHIB', 'FLOKI', 'BONK', 'WIF', 'DOGE', 'MEME'
        ]
        
        for coin in popular_coins:
            if coin in text_upper:
                found_coins.append(coin)
        
        return list(set(found_coins))
    
    def check_new_news(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        current_news = self.get_crypto_news()
        new_news = []
        
        for news in current_news:
            news_id = f"{news['title']}_{news['timestamp'].strftime('%Y%m%d%H%M')}"
            if news_id not in self.last_news:
                new_news.append(news)
                self.last_news[news_id] = news['timestamp']
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        current_time = datetime.now()
        expired_news = [
            news_id for news_id, timestamp in self.last_news.items()
            if (current_time - timestamp).total_seconds() > 24 * 3600
        ]
        for news_id in expired_news:
            del self.last_news[news_id]
        
        return new_news

class AdvancedAnalyzer:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.news_monitor = NewsMonitor()
    
    def fetch_top_coins(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ø-100 –º–æ–Ω–µ—Ç"""
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {
            "vs_currency": "usd",
            "order": "market_cap_desc",
            "per_page": 100,
            "page": 1,
            "sparkline": "false",
            "price_change_percentage": "24h,7d"
        }
        
        try:
            logging.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å CoinGecko...")
            response = self.session.get(url, params=params, timeout=30)
            if response.status_code == 200:
                coins = response.json()
                filtered_coins = [
                    coin for coin in coins 
                    if coin['symbol'].lower() not in EXCLUDE_COINS
                ]
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_coins)} –º–æ–Ω–µ—Ç")
                return filtered_coins
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç: {e}")
        return []
    
    def search_coin(self, symbol):
        """–ò—â–µ—Ç –º–æ–Ω–µ—Ç—É –ø–æ —Å–∏–º–≤–æ–ª—É"""
        symbol = symbol.upper().strip()
        logging.info(f"üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã: {symbol}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–æ–ø-100
        top_coins = self.fetch_top_coins()
        for coin in top_coins:
            if coin['symbol'].upper() == symbol:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø-100: {symbol}")
                return coin
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–æ–ø-100, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ CoinGecko
        try:
            search_url = f"https://api.coingecko.com/api/v3/search?query={symbol}"
            search_response = self.session.get(search_url, timeout=10)
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                coins_list = search_data.get('coins', [])
                
                if coins_list:
                    coin_id = coins_list[0]['id']
                    coin_url = f"https://api.coingecko.com/api/v3/coins/{coin_id}"
                    coin_response = self.session.get(coin_url, timeout=10)
                    
                    if coin_response.status_code == 200:
                        coin_data = coin_response.json()
                        if 'market_data' in coin_data:
                            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: {symbol}")
                            return {
                                'id': coin_data['id'],
                                'symbol': coin_data['symbol'].upper(),
                                'name': coin_data['name'],
                                'current_price': coin_data['market_data']['current_price']['usd'],
                                'market_cap': coin_data['market_data']['market_cap']['usd'],
                                'total_volume': coin_data['market_data']['total_volume']['usd'],
                                'price_change_percentage_24h': coin_data['market_data']['price_change_percentage_24h']
                            }
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç—ã {symbol}: {e}")
        
        logging.warning(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {symbol}")
        return None
    
    def calculate_coin_score(self, coin):
        """–†–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—á–µ—Ç –º–æ–Ω–µ—Ç—ã (0-100)"""
        score = 0
        analysis = {}
        
        try:
            # 1. Volume Score (30%)
            volume_ratio = coin['total_volume'] / coin['market_cap'] if coin['market_cap'] > 0 else 0
            if volume_ratio > 0.3:
                score += 30
                analysis['volume'] = "üî• –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º"
            elif volume_ratio > 0.15:
                score += 20
                analysis['volume'] = "üìà –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º"
            elif volume_ratio > 0.05:
                score += 10
                analysis['volume'] = "üíπ –•–æ—Ä–æ—à–∏–π –æ–±—ä–µ–º"
            
            # 2. Price Momentum Score (25%)
            price_change_24h = coin.get('price_change_percentage_24h', 0) or 0
            if 10 < price_change_24h < 50:
                score += 25
                analysis['momentum'] = f"üöÄ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{price_change_24h:.1f}%"
            elif 5 < price_change_24h < 10:
                score += 15
                analysis['momentum'] = f"üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç +{price_change_24h:.1f}%"
            elif price_change_24h < -20:
                score += 10
                analysis['momentum'] = f"üí• –ü—Ä–æ—Å–∞–¥–∫–∞ {price_change_24h:.1f}%"
            
            # 3. Market Cap Score (20%)
            market_cap = coin['market_cap']
            if market_cap < 50000000:
                score += 20
                analysis['market_cap'] = "üè¶ –ú–∞–ª–∞—è –∫–∞–ø–∞ - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
            elif market_cap < 200000000:
                score += 15
                analysis['market_cap'] = "üè¶ –°—Ä–µ–¥–Ω—è—è –∫–∞–ø–∞"
            
            # 4. Risk Adjustment
            if price_change_24h > 100:
                score -= 15
                analysis['risk'] = "‚ö†Ô∏è –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–∞ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ score: {e}")
        
        return max(0, min(100, score)), analysis
    
    def get_top_predictions(self, coins_data, top_n=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –º–æ–Ω–µ—Ç –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª–µ"""
        predictions = []
        
        for coin in coins_data:
            try:
                score, analysis = self.calculate_coin_score(coin)
                predictions.append({
                    'symbol': coin['symbol'].upper(),
                    'name': coin['name'],
                    'score': score,
                    'price': coin['current_price'],
                    'price_change_24h': coin.get('price_change_percentage_24h', 0) or 0,
                    'market_cap': coin['market_cap'],
                    'volume': coin['total_volume'],
                    'analysis': analysis
                })
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–Ω–µ—Ç—ã {coin.get('symbol', 'unknown')}: {e}")
                continue
        
        predictions.sort(key=lambda x: x['score'], reverse=True)
        return predictions[:top_n]
    
    def get_coin_analysis(self, symbol):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        coin_data = self.search_coin(symbol)
        
        if coin_data:
            score, analysis = self.calculate_coin_score(coin_data)
            return {
                'symbol': symbol.upper(),
                'name': coin_data['name'],
                'score': score,
                'price': coin_data['current_price'],
                'price_change_24h': coin_data.get('price_change_percentage_24h', 0) or 0,
                'market_cap': coin_data['market_cap'],
                'volume': coin_data['total_volume'],
                'volume_ratio': coin_data['total_volume'] / coin_data['market_cap'] if coin_data['market_cap'] > 0 else 0,
                'analysis': analysis,
                'recommendation': self.get_recommendation(score, analysis)
            }
        return None
    
    def get_recommendation(self, score, analysis):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞"""
        if score >= 80:
            return "üöÄ –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ - –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞"
        elif score >= 65:
            return "üìà –•–û–†–û–®–ò–ô –°–ò–ì–ù–ê–õ - –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif score >= 50:
            return "üí° –°–†–ï–î–ù–ò–ô –°–ò–ì–ù–ê–õ - –¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"
        else:
            return "‚ö†Ô∏è –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"

class CryptoFinalBot:
    def __init__(self):
        self.token = "8406686288:AAHSHNwi_ocevorBddn5P_6Oc70aMx0-Usc"
        self.chat_id = "6823451625"
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.analyzer = AdvancedAnalyzer()
        self.last_update_id = 0
        self.is_processing = False
        self.user_states = {}
        self.last_manual_update = 0
        self.cached_predictions = None
        self.last_successful_update = None
    
    def send_message(self, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if self.is_processing:
            return False
            
        self.is_processing = True
        url = f"{self.base_url}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup
            
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        finally:
            self.is_processing = False
        return False
    
    def create_reply_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
        return {
            'keyboard': [
                ['üèÜ –¢–û–ü 10', 'üîÑ –û–ë–ù–û–í–ò–¢–¨'],
                ['üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´', 'üöÄ –°–ò–ì–ù–ê–õ–´'],
                ['üì∞ –ö–†–ò–ü–¢–û-–ù–û–í–û–°–¢–ò', '‚ùì –ü–û–ú–û–©–¨']
            ],
            'resize_keyboard': True,
            'one_time_keyboard': False
        }
    
    def create_signal_keyboard(self, symbol):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –°–†–ê–ë–û–¢–ê–õ', 'callback_data': f'success_{symbol}'},
                    {'text': '‚ùå –ù–ï –°–†–ê–ë–û–¢–ê–õ', 'callback_data': f'fail_{symbol}'}
                ],
                [
                    {'text': 'üí° –ß–ê–°–¢–ò–ß–ù–û', 'callback_data': f'partial_{symbol}'}
                ]
            ]
        }
    
    def format_news_alert(self, news_item):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–ª–µ—Ä—Ç"""
        coins_text = ", ".join(news_item['coins'])
        
        message = f"""
üì∞ <b>–ù–û–í–û–°–¢–ù–û–ô –ê–õ–ï–†–¢!</b>

üè∑Ô∏è <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {news_item['title']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {news_item['description']}
üí∞ <b>–£–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {coins_text}

üîó <a href="{news_item['url']}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>

üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –º–æ–Ω–µ—Ç—ã!</i>
"""
        return message
    
    def format_top_predictions(self, predictions, show_cache_info=False, update_time=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        if not predictions:
            return "üìä <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        message = "üèÜ <b>–¢–û–ü 10 –ü–ï–†–°–ü–ï–ö–¢–ò–í–ù–´–• –ú–û–ù–ï–¢</b>\n\n"
        
        for i, coin in enumerate(predictions, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
            price = coin['price']
            if price is None:
                price_str = "N/A"
            elif price < 0.001:
                price_str = f"${price:.8f}"
            elif price < 1:
                price_str = f"${price:.6f}"
            else:
                price_str = f"${price:.2f}"
            
            message += f"{emoji} <b>{coin['symbol']}</b> - Score: {coin['score']}%\n"
            message += f"   üí∞ {price_str} | üìà {coin['price_change_24h']:.1f}%\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if coin['analysis']:
                main_reason = list(coin['analysis'].values())[0]
                message += f"   üîç {main_reason}\n"
            else:
                message += f"   üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞\n"
            
            message += "\n"
        
        if show_cache_info and update_time:
            time_diff = datetime.now() - update_time
            minutes_ago = int(time_diff.total_seconds() / 60)
            message += f"üíæ <i>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {update_time.strftime('%H:%M:%S')} ({minutes_ago} –º–∏–Ω. –Ω–∞–∑–∞–¥)</i>\n"
        else:
            message += "‚ö° <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ</i>\n"
            
        message += "üîÑ <i>–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</i>"
        return message
    
    def format_coin_analysis(self, analysis):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
        if not analysis:
            return "‚ùå –ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL, NEAR)"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price = analysis['price']
        if price is None:
            price_str = "N/A"
        elif price < 0.001:
            price_str = f"${price:.8f}"
        elif price < 1:
            price_str = f"${price:.6f}"
        else:
            price_str = f"${price:.2f}"
        
        message = f"""
üîç <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - {analysis['symbol']}</b>

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {analysis['name']}
üéØ <b>–û–±—â–∏–π —Å—á–µ—Ç:</b> {analysis['score']}/100
üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {analysis['price_change_24h']:.1f}%
üè¶ <b>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b> ${analysis['market_cap']:,.0f}
üìà <b>–û–±—ä–µ–º/–ö–∞–ø–∞:</b> {analysis['volume_ratio']:.2%}

<b>–ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö:</b>
"""
        if analysis['analysis']:
            for metric, desc in analysis['analysis'].items():
                message += f"‚Ä¢ {desc}\n"
        else:
            message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞\n"
        
        message += f"\n<b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b>\n{analysis['recommendation']}"
        return message
    
    def format_statistics(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        message = """
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

<b>üìà –ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢:</b>
‚Ä¢ –¢–æ–ø-100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–ª–µ—Ä—Ç—ã

<b>üéØ –ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:</b>
‚Ä¢ –ú–∞–ª–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (<$50M)
‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç (5-50%)
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö

<b>üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>
‚Ä¢ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
‚Ä¢ –¢–æ–ø 10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤

‚ö° <i>–°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç—Å—è!</i>
"""
        return message
    
    def format_help(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–º–æ—â—å"""
        help_text = """
‚ùì <b>–ü–û–ú–û–©–¨ –ü–û –°–ò–°–¢–ï–ú–ï</b>

<b>üèÜ –¢–û–ü 10</b> - –õ—É—á—à–∏–µ –º–æ–Ω–µ—Ç—ã –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É —Ä–æ—Å—Ç–∞
<b>üîÑ –û–ë–ù–û–í–ò–¢–¨</b> - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑ –≤ 30 —Å–µ–∫)
<b>üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´</b> - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª—É
<b>üöÄ –°–ò–ì–ù–ê–õ–´</b> - –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
<b>üì∞ –ö–†–ò–ü–¢–û-–ù–û–í–û–°–¢–ò</b> - –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –º–æ–Ω–µ—Ç

<b>üìà –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
2. –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã
3. –û—Ç–º–µ—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –∞–ª–µ—Ä–∞–º–∏

<b>üí° –ü–†–ò–ú–ï–†–´ –°–ò–ú–í–û–õ–û–í:</b>
BTC, ETH, SOL, ADA, DOT, MATIC, AVAX, NEAR

‚ö° <i>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫!</i>
"""
        return help_text
    
    def handle_manual_update(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º"""
        current_time = time.time()
        time_since_last = current_time - self.last_manual_update
        
        if time_since_last < 30:
            seconds_left = 30 - int(time_since_last)
            return f"‚è∞ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫."
        else:
            self.last_manual_update = current_time
            return self.show_top_predictions(force_update=True)
    
    def show_top_predictions(self, force_update=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 10 –º–æ–Ω–µ—Ç"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à
        if self.cached_predictions and not force_update:
            message = self.format_top_predictions(
                self.cached_predictions, 
                show_cache_info=True,
                update_time=self.last_successful_update
            )
            keyboard = self.create_reply_keyboard()
            self.send_message(message, keyboard)
            return
        
        logging.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–û–ü 10...")
        coins_data = self.analyzer.fetch_top_coins()
        if coins_data:
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(coins_data)} –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            predictions = self.analyzer.get_top_predictions(coins_data, 10)
            self.cached_predictions = predictions
            self.last_successful_update = datetime.now()
            message = self.format_top_predictions(predictions)
            if force_update:
                message = message.replace("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ", "‚úÖ <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>")
            keyboard = self.create_reply_keyboard()
            self.send_message(message, keyboard)
        else:
            # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–µ—à –∏–ª–∏ –æ—à–∏–±–∫—É
            if self.cached_predictions:
                message = self.format_top_predictions(
                    self.cached_predictions,
                    show_cache_info=True,
                    update_time=self.last_successful_update
                )
                message += "\n\n‚ö†Ô∏è <i>API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</i>"
                keyboard = self.create_reply_keyboard()
                self.send_message(message, keyboard)
            else:
                self.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å CoinGecko. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", self.create_reply_keyboard())
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        message = self.format_statistics()
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å"""
        message = self.format_help()
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_crypto_news(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏"""
        news_items = self.analyzer.news_monitor.get_crypto_news()
        
        if not news_items:
            message = "üì∞ <b>–ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç! üîÑ"
            keyboard = self.create_reply_keyboard()
            self.send_message(message, keyboard)
            return
        
        for news in news_items[:3]:
            message = self.format_news_alert(news)
            keyboard = self.create_reply_keyboard()
            self.send_message(message, keyboard)
            time.sleep(1)
    
    def ask_for_coin_symbol(self):
        """–ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã"""
        message = """
üîç <b>–ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´</b>

–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ <b>–ü—Ä–∏–º–µ—Ä—ã:</b> BTC, ETH, SOL, ADA, DOT
‚Ä¢ <b>–ò–ª–∏:</b> MATIC, AVAX, NEAR, APT, ARB
‚Ä¢ <b>–ò–ª–∏ –õ–Æ–ë–ê–Ø –¥—Ä—É–≥–∞—è –º–æ–Ω–µ—Ç–∞!</b>

üìä <i>–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:
- Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
- Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ –∏ —Ä–∏—Å–∫–∏
- –û–±—â–∏–π scoring (0-100)</i>

üí° <b>–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Å–µ–π—á–∞—Å:</b>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def analyze_coin_by_symbol(self, symbol):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—É –ø–æ —Å–∏–º–≤–æ–ª—É"""
        logging.info(f"üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã: {symbol}")
        analysis = self.analyzer.get_coin_analysis(symbol)
        message = self.format_coin_analysis(analysis)
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def show_active_signals(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        message = """
üöÄ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´</b>

–°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç!

<b>üìà –°–ò–ì–ù–ê–õ–´ –í–ö–õ–Æ–ß–ê–Æ–¢:</b>
‚Ä¢ –ú–æ–Ω–µ—Ç—ã —Å scoring > 60%
‚Ä¢ –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –∫–∞–ø–µ
‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö

<b>‚è∞ –ß–ê–°–¢–û–¢–ê –°–ò–ì–ù–ê–õ–û–í:</b>
‚Ä¢ –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ setup

‚ö° <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...</i>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(message, keyboard)
    
    def send_signal(self, coin, score, analysis):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        symbol = coin['symbol'].upper()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price = coin['current_price']
        if price is None:
            price_str = "N/A"
        elif price < 0.001:
            price_str = f"${price:.8f}"
        elif price < 1:
            price_str = f"${price:.6f}"
        else:
            price_str = f"${price:.2f}"
        
        message = f"""
üéØ <b>–°–ò–ì–ù–ê–õ - {symbol}</b>

‚≠ê <b>Score:</b> {score}/100
üí∞ <b>–¶–µ–Ω–∞:</b> {price_str}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> {coin.get('price_change_percentage_24h', 0):.1f}%

<b>–û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´:</b>
"""
        if analysis:
            for reason in list(analysis.values())[:3]:
                message += f"‚Ä¢ {reason}\n"
        else:
            message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞\n"
        
        message += "\nüí° <i>–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã!</i>"
        
        keyboard = self.create_signal_keyboard(symbol)
        return self.send_message(message, keyboard)
    
    def send_news_alerts(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        new_news = self.analyzer.news_monitor.check_new_news()
        
        for news in new_news:
            message = self.format_news_alert(news)
            keyboard = self.create_reply_keyboard()
            self.send_message(message, keyboard)
            time.sleep(1)
    
    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
        try:
            url = f"{self.base_url}/getUpdates"
            params = {'offset': self.last_update_id + 1, 'timeout': 5}
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                updates = response.json().get('result', [])
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        self.handle_message(update['message'])
                    elif 'callback_query' in update:
                        self.handle_callback(update['callback_query'])
                        
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if 'text' not in message:
            return
        
        text = message['text'].strip()
        logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        if text == 'üèÜ –¢–û–ü 10':
            self.show_top_predictions()
        elif text == 'üîÑ –û–ë–ù–û–í–ò–¢–¨':
            result = self.handle_manual_update()
            if isinstance(result, str):
                self.send_message(result, self.create_reply_keyboard())
        elif text == 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê':
            self.show_statistics()
        elif text == 'üîç –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´':
            self.ask_for_coin_symbol()
        elif text == 'üöÄ –°–ò–ì–ù–ê–õ–´':
            self.show_active_signals()
        elif text == 'üì∞ –ö–†–ò–ü–¢–û-–ù–û–í–û–°–¢–ò':
            self.show_crypto_news()
        elif text == '‚ùì –ü–û–ú–û–©–¨':
            self.show_help()
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (3-10 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã)
            if 2 <= len(text) <= 10 and text.replace(' ', '').isalnum():
                self.analyze_coin_by_symbol(text)
            else:
                self.send_message("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", self.create_reply_keyboard())
    
    def handle_callback(self, callback_query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            callback_data = callback_query['data']
            message = callback_query['message']
            
            logging.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data}")
            
            if callback_data.startswith('success_'):
                symbol = callback_data.replace('success_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –°–†–ê–ë–û–¢–ê–õ\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
            elif callback_data.startswith('fail_'):
                symbol = callback_data.replace('fail_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –ù–ï –°–†–ê–ë–û–¢–ê–õ\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
            elif callback_data.startswith('partial_'):
                symbol = callback_data.replace('partial_', '')
                self.send_message(f"‚úÖ <b>–§–ò–î–ë–ï–ö –ó–ê–ü–ò–°–ê–ù!</b>\n\n{symbol} - –ß–ê–°–¢–ò–ß–ù–û\n\n–°–ø–∞—Å–∏–±–æ! –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—Å—è üß†", self.create_reply_keyboard())
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def send_welcome(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = """
ü§ñ <b>–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û</b>

üöÄ <b>–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê</b>

üìä <b>–ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢:</b>
‚Ä¢ –¢–æ–ø-100 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ Volume/Market Cap —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ Price momentum –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>
‚Ä¢ üèÜ –¢–æ–ø 10 –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
‚Ä¢ üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
‚Ä¢ üöÄ –ê–≤—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã

‚ö° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!</b>
"""
        keyboard = self.create_reply_keyboard()
        self.send_message(welcome_text, keyboard)

def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –§–ò–ù–ê–õ–¨–ù–û–ô –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏...")
    
    bot = CryptoFinalBot()
    
    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    def updates_worker():
        while True:
            try:
                bot.check_updates()
                time.sleep(1)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ updates_worker: {e}")
                time.sleep(5)
    
    updates_thread = Thread(target=updates_worker, daemon=True)
    updates_thread.start()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    time.sleep(2)
    bot.send_welcome()
    
    last_news_check = time.time()
    last_analysis_check = time.time()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
    while True:
        try:
            current_time = time.time()
            logging.info(f"\n[{datetime.now().strftime('%H:%M:%S')}] –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_analysis_check > CONFIG['interval']:
                coins_data = bot.analyzer.fetch_top_coins()
                if coins_data:
                    logging.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(coins_data)} –º–æ–Ω–µ—Ç")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø—Ä–∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    top_predictions = bot.analyzer.get_top_predictions(coins_data, 10)
                    bot.cached_predictions = top_predictions
                    bot.last
